# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_liaAPzD9mhVhuh4tYyhqGa7vOkGUoV-
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler
from sklearn.manifold import TSNE
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.manifold import TSNE
import matplotlib.pyplot as plt

# Read data
myopia_df = pd.read_csv("myopia.csv")
myopia_df.head()

# Drop "MYOPIC" column from the dataset
X = myopia_df.drop('MYOPIC', axis=1)
X.head()

# Standardize your dataset
myopia_scaled = StandardScaler().fit_transform(X)
print(myopia_scaled[0:5])

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.manifold import TSNE
import matplotlib.pyplot as plt

# Read data
myopia_df = pd.read_csv("myopia.csv")
myopia_df.head()

# Drop "MYOPIC" column from the dataset
X = myopia_df.drop('MYOPIC', axis=1)
X.head()

# Standardize your dataset
myopia_scaled = StandardScaler().fit_transform(X)
print(myopia_scaled[0:5])

# Apply Dimensionality Reduction with PCA
pca = PCA(n_components=0.90)  # Preserve 90% of the explained variance
myopia_pca = pca.fit_transform(myopia_scaled)
myopia_pca.shape

# Transform PCA data to a DataFrame
df_myopia_pca = pd.DataFrame(
    data=myopia_pca, columns=[f"principal component {i+1}" for i in range(myopia_pca.shape[1])], index=myopia_df.index
)
df_myopia_pca.head()

# Fetch the explained variance
print(pca.explained_variance_ratio_)

# Further reduce the dataset dimensions with t-SNE
tsne = TSNE(perplexity=50)
tsne_features = tsne.fit_transform(myopia_pca)

# Create a scatter plot of the t-SNE output
plt.scatter(tsne_features[:, 0], tsne_features[:, 1])
plt.show()

# Perform a Cluster Analysis with K-means
model = KMeans(n_clusters=3, random_state=5)
model.fit(myopia_scaled)  # Fit on standardized data
predictions = model.predict(myopia_scaled)
print(predictions)

# Add a new class column to myopia_df
myopia_df["class"] = model.labels_
myopia_df.head()

# Finding the best value for k using the Elbow Curve
inertia = []
k = list(range(1, 11))

for i in k:
    km = KMeans(n_clusters=i, random_state=0)
    km.fit(myopia_scaled)  # Fit on standardized data
    inertia.append(km.inertia_)

# Plot the Elbow Curve
df_elbow = pd.DataFrame({"k": k, "inertia": inertia})
plt.plot(df_elbow['k'], df_elbow['inertia'])
plt.xticks(range(1, 11))
plt.title('Elbow Curve')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()